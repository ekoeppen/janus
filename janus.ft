hex

include intel-hex.ft

\ -- Generic ------------------------------------------------------------------

        0 value trom
        0 value tram
        0 value tcell

 wordlist constant target-wordlist
 wordlist constant meta-wordlist

        1 constant call-range-exceeded
        2 constant non-empty-stack
$00080000 constant target#

variable tdp
variable tvp
variable tlast 0 tlast !

create #target target# allot
       #target target# -1 fill

: ::meta::  only forth meta-wordlist >order definitions ;
: ::target::
            only forth definitions target-wordlist >order meta-wordlist >order ;

: pack$     dup >r 2dup c! 1+ 2dup + 0 swap ! swap cmove r> ;

: >target   #target + trom - ;
: there     tdp @ ;
: torg      tdp ! ;
: taligned  tcell 1- + tcell negate and ;
: talign    there taligned tdp ! ;
: tallot    tdp +! ;
: t!        >target l! ;
: tc@       >target c@ ;
: t@        >target l@ ;
: tc!       >target c! ;
: th!       >target w! ;
: t,        there t! tcell tallot ;
: tc,       there tc! 1 tallot ;
: th,       there th! 2 tallot ;

: tfind     target-wordlist search-wordlist 0= throw >body @ ;
: t'        parse-name tfind ;
: mcreate   get-current target-wordlist set-current create set-current ;
: lookahead ( -- b u : parse a word, but leave it in the input stream )
            >in @ >r parse-name r> >in ! ;

\ -- Specific -----------------------------------------------------------------

: ,docon    $F846 th, $0D04 th, $4800 th, $46F7 th, ;
: ,enter    $B500 th, ;
: ,exit     $BD00 th, ;
: ,call     4 - there -
            dup -$1000000 $1000000 within 0= if call-range-exceeded throw then
            1 #23 lshift 1- and
            dup #12 rshift %0000011111111111 and $F000 or th,
                 #1 rshift %0000011111111111 and $F800 or th, ;
: thead     ( c-addr n -- : compile word header into the target image )
            talign
            there tlast @ t, tlast !
            $ff7f th,
            there >target pack$ c@ 1+ tallot talign ;
: timmediate tlast @ tcell + dup tc@ $bf and swap tc! ;

\ -- Generic ------------------------------------------------------------------

: ,tcall    tfind ,call ;

: h:        ( -- : create a word with no name in the target dictionary )
            mcreate there , does> @ ,call ;

: t:        ( "name", -- : creates a word in the target dictionary )
            lookahead thead h: ;
: t;        ;

::meta::

include parse.ft
include code.ft

create squote$ char s c, char " c,
create (squote)$ char ( c, char s c, char " c, char ) c,
: type$     s" type";

: immediate immediate timmediate ;

: postpone  parse-name target-wordlist search-wordlist dup 0= throw
            swap >body @ swap
            0< if s" lit" ,tcall t, s" ,call" ,tcall
               else ,call
               then ;
: if        s" ?branch" ,tcall there tcell tallot ;
: else      s" branch" ,tcall there tcell tallot there rot t! ;
: then      there swap t! ;
: begin     there ;
: while     s" ?branch" ,tcall there tcell tallot ;
: again     s" branch" ,tcall t, ;
: until     s" ?branch" ,tcall t, ;
: repeat    swap s" branch" ,tcall t, there swap t! ;
: do        s" (do)" ,tcall there ;
: loop      s" (loop)" ,tcall s" ?branch" ,tcall t, ;
: (         [char] ) word drop ;
: \         refill drop ;
: [']       s" lit" ,tcall t' t, ;
: [char]    s" lit" ,tcall char t, ;
: s"        (squote)$ 4 ,tcall
            $22 word dup dup c@ 1+ there #target + trom - swap cmove
            c@ 1+ tallot talign ;
: ."        s" type$ ,tcall ;

: constant  t: ,docon t, ;
: variable  t: ,docon tvp @ t, tcell tvp +! ;
: buffer:   t: ,docon tvp @ t, tvp +! ;

: meta:     : ;
: :         t: ,enter read-word ;
meta:       ; ,exit t; end-word ;

\ -- Specific -----------------------------------------------------------------

::target::

$08000000 to trom
$20000000 to tram
        4 to tcell

trom tdp !
tram tvp !

tram $00001000 + t, 0 t,
trom $00000400 + torg

      variable base
      variable hp
      variable dp
      variable vp
      variable latest
      variable >in
      variable source#
      variable (source)
  $80 buffer:  tib
  $80 constant tib#
  $7C buffer:  psp
      variable s0
  $7C buffer:  rsp
      variable r0

include CoreForth-0/cortex-stc/boards/thumbulator-m3.ft
\ include CoreForth-0/cortex-stc/boards/nucleo-f103rb.ft

\ -- Generic ------------------------------------------------------------------

: final     depth if
              ." Stack not empty: " cr
              .s cr
              non-empty-stack throw
            then ;

final
only forth bye
