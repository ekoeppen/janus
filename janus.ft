hex

include intel-hex.ft

wordlist constant target-wordlist
wordlist constant meta-wordlist
  $20000 constant target#
       4 constant tcell
       1 constant call-range-exceeded

variable tdp           0 tdp !
variable tvp   $20000000 tvp !
variable tlast         0 tlast !

create #target target# allot
       #target target# -1 fill

: pack$     dup >r 2dup c! 1+ 2dup + 0 swap ! swap cmove r> ;

: there     tdp @ ;
: torg      tdp ! ;
: taligned  tcell 1- + tcell negate and ;
: talign    there taligned tdp ! ;
: tallot    tdp +! ;
: t!        #target + l! ;
: tc@       #target + c@ ;
: t@        #target + l@ ;
: tc!       #target + c! ;
: th!       #target + w! ;
: t,        there t! tcell tallot ;
: tc,       there tc! 1 tallot ;
: th,       there th! 2 tallot ;

: tfind     target-wordlist search-wordlist 0= throw >body @ ;
: t'        bl parse tfind ;
: mcreate   get-current target-wordlist set-current create set-current ;

: ,enter    $b500 th, ;
: ,exit     $bd00 th, ;
: ,call     4 - there -
            dup -$1000000 $1000000 within 0= if call-range-exceeded throw then
            1 #23 lshift 1- and
            dup #12 rshift %0000011111111111 and $F000 or th,
                 #1 rshift %0000011111111111 and $F800 or th, ;
: ,tcall    tfind ,call ;

: thead     ( b u -- : compile word header into the target image )
            talign
            there tlast @ t, tlast !
            $ff7f th,
            there #target + pack$ c@ 1+ tallot talign ;

: tflags    tcell + ;

: lookahead ( -- b u : parse a word, but leave it in the input stream )
            >in @ >r bl parse r> >in ! ;

: h:        ( -- : create a word with no name in the target dictionary )
            mcreate there , does> @ ,call ;

: t:        ( "name", -- : creates a word in the target dictionary )
            lookahead thead h: ;
: t;        ;

get-current meta-wordlist set-current
meta-wordlist >order

$20001000 t, 0 t, $90 torg

include parse.ft
include code.ft

: postpone  bl parse target-wordlist search-wordlist dup 0= throw
            swap >body @ swap
            0< if s" lit" ,tcall t, s" ,call" ,tcall
               else ,call
               then ;
: immediate immediate tlast @ tflags dup tc@ $bf and swap tc! ;
: if        s" ?branch" ,tcall there tcell tallot ;
: else      s" branch" ,tcall there tcell tallot there rot t! ;
: then      there swap t! ;
: begin     there ;
: while     s" ?branch" ,tcall there tcell tallot ;
: again     s" branch" ,tcall t, ;
: until     s" ?branch" ,tcall t, ;
: repeat    swap s" branch" ,tcall t, there swap t! ;
: (         [char] ) word drop ; immediate
: \         refill drop ; immediate
: [char]    s" lit" ,tcall char t, ;

: constant  t: $F846 th, $0D04 th, $4800 th, $46F7 th, t, ;
: variable  t: $F846 th, $0D04 th, $4800 th, $46F7 th, tvp @ t, tcell tvp +! ;
: buffer:   t: $F846 th, $0D04 th, $4800 th, $46F7 th, tvp @ t, tvp +! ;

: meta:     : ;
: :         t: ,enter read-word ;
meta:       ; ,exit t; end-word ;

previous
set-current

target-wordlist >order
meta-wordlist >order

      variable base
      variable hp
      variable dp
      variable vp
      variable latest
      variable >in
      variable source#
      variable (source)
  $80 buffer:  tib
  $80 constant tib#
  $7E buffer:  psp
      variable s0
  $7E buffer:  rsp
      variable r0


include armv7-m-primitives.ft
include core.ft
\ include efm32pg-slstk3402a.ft
include thumbulator-m3.ft
include io.ft
include utils.ft
include compiler.ft

: save          save-vars
                \ 0 0 here s" saved.hex" type-hex
                0 here rom-dump
                bye ;
: slist         latest begin @ dup while
                  dup $10 dump dup link>name count type
                repeat drop ;
: cold          setup-vars abort ;

only forth

t' reset-handler 1+ $00000004 t!
t' cold             $00000080 t!
tlast @             $00000084 t!
tdp @               $00000088 t!
tvp @               $0000008C t!

.s cr

0 #target there s" hybris.hex" type-hex

only forth bye
