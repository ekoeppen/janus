\ ## Utilities for strings and paths

\ Create a string which keeps the data in the dictionary. The first two
\ cells of the string contain the current length and the maximum length,
\ followed by the actual string data. When called, a string returns
\ the address of the first cell, i.e. the current length:

: string        create 0 , dup , allot
                does> ;

\ Print out the lengt, maximum length and data address of a string:

: string.       dup @ . cell+ dup @ . cell+ . ;

\ Similar to `count`, leave the data addess and current length of the
\ string on the stack:

: string-count  ( s -- c-addr n ) dup @ swap cell+ cell+ swap ;

\ Append a single character to the string:

: c>string      ( c s -- ) dup >r dup @ swap cell+ cell+ + c! 1 r> +! ;

\ Get the address of the first unallocated character:

: string-last   ( s -- c-addr ) dup @ swap cell+ cell+ + ;

\ Append the contents of a given memory range to the string:

: s>string      ( c-addr n s -- ) dup >r string-last swap dup >r cmove r> r> +! ;

\ Copy the contents of a memory range to the string:

: string!       ( c-addr n s -- ) 0 over ! s>string ;

\ Copy the absolute path for a given absolute or relative path to
\ a string:

: abs-path>string ( c-addr n s -- )
                rot dup c@ [char] / = if -rot string! exit then -rot
                dup cell+ dup @ swap cell+ swap get-dir
                    nip over +!
                [char] / over c>string
                s>string
                ;
